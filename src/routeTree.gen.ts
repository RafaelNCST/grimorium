/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PlotTimelineRouteImport } from './routes/plot-timeline'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PlotArcIdRouteImport } from './routes/plot-arc/$id'
import { Route as BeastIdRouteImport } from './routes/beast/$id'
import { Route as ItemIdIndexRouteImport } from './routes/item/$id/index'
import { Route as BookBookIdIndexRouteImport } from './routes/book/$bookId/index'
import { Route as ItemIdTimelineRouteImport } from './routes/item/$id/timeline'
import { Route as BookBookIdDashboardRouteImport } from './routes/book/$bookId/dashboard'
import { Route as BookBookIdChaptersRouteImport } from './routes/book/$bookId/chapters'
import { Route as BookBookIdWorldWorldIdRouteImport } from './routes/book/$bookId/world/$worldId'
import { Route as BookBookIdOrganizationOrgIdRouteImport } from './routes/book/$bookId/organization/$orgId'
import { Route as BookBookIdFileFileIdRouteImport } from './routes/book/$bookId/file/$fileId'
import { Route as BookBookIdCharacterCharacterIdRouteImport } from './routes/book/$bookId/character/$characterId'
import { Route as BookBookIdChapterChapterIdRouteImport } from './routes/book/$bookId/chapter/$chapterId'
import { Route as BookBookIdCharacterCharacterIdFamilyTreeRouteImport } from './routes/book/$bookId/character/$characterId/family-tree'
import { Route as BookBookIdWorldWorldIdSpeciesSpeciesIdRouteImport } from './routes/book/$bookId/world/$worldId/species/$speciesId'
import { Route as BookBookIdWorldWorldIdRaceRaceIdRouteImport } from './routes/book/$bookId/world/$worldId/race/$raceId'

const PlotTimelineRoute = PlotTimelineRouteImport.update({
  id: '/plot-timeline',
  path: '/plot-timeline',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlotArcIdRoute = PlotArcIdRouteImport.update({
  id: '/plot-arc/$id',
  path: '/plot-arc/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const BeastIdRoute = BeastIdRouteImport.update({
  id: '/beast/$id',
  path: '/beast/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ItemIdIndexRoute = ItemIdIndexRouteImport.update({
  id: '/item/$id/',
  path: '/item/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const BookBookIdIndexRoute = BookBookIdIndexRouteImport.update({
  id: '/book/$bookId/',
  path: '/book/$bookId/',
  getParentRoute: () => rootRouteImport,
} as any)
const ItemIdTimelineRoute = ItemIdTimelineRouteImport.update({
  id: '/item/$id/timeline',
  path: '/item/$id/timeline',
  getParentRoute: () => rootRouteImport,
} as any)
const BookBookIdDashboardRoute = BookBookIdDashboardRouteImport.update({
  id: '/book/$bookId/dashboard',
  path: '/book/$bookId/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const BookBookIdChaptersRoute = BookBookIdChaptersRouteImport.update({
  id: '/book/$bookId/chapters',
  path: '/book/$bookId/chapters',
  getParentRoute: () => rootRouteImport,
} as any)
const BookBookIdWorldWorldIdRoute = BookBookIdWorldWorldIdRouteImport.update({
  id: '/book/$bookId/world/$worldId',
  path: '/book/$bookId/world/$worldId',
  getParentRoute: () => rootRouteImport,
} as any)
const BookBookIdOrganizationOrgIdRoute =
  BookBookIdOrganizationOrgIdRouteImport.update({
    id: '/book/$bookId/organization/$orgId',
    path: '/book/$bookId/organization/$orgId',
    getParentRoute: () => rootRouteImport,
  } as any)
const BookBookIdFileFileIdRoute = BookBookIdFileFileIdRouteImport.update({
  id: '/book/$bookId/file/$fileId',
  path: '/book/$bookId/file/$fileId',
  getParentRoute: () => rootRouteImport,
} as any)
const BookBookIdCharacterCharacterIdRoute =
  BookBookIdCharacterCharacterIdRouteImport.update({
    id: '/book/$bookId/character/$characterId',
    path: '/book/$bookId/character/$characterId',
    getParentRoute: () => rootRouteImport,
  } as any)
const BookBookIdChapterChapterIdRoute =
  BookBookIdChapterChapterIdRouteImport.update({
    id: '/book/$bookId/chapter/$chapterId',
    path: '/book/$bookId/chapter/$chapterId',
    getParentRoute: () => rootRouteImport,
  } as any)
const BookBookIdCharacterCharacterIdFamilyTreeRoute =
  BookBookIdCharacterCharacterIdFamilyTreeRouteImport.update({
    id: '/family-tree',
    path: '/family-tree',
    getParentRoute: () => BookBookIdCharacterCharacterIdRoute,
  } as any)
const BookBookIdWorldWorldIdSpeciesSpeciesIdRoute =
  BookBookIdWorldWorldIdSpeciesSpeciesIdRouteImport.update({
    id: '/species/$speciesId',
    path: '/species/$speciesId',
    getParentRoute: () => BookBookIdWorldWorldIdRoute,
  } as any)
const BookBookIdWorldWorldIdRaceRaceIdRoute =
  BookBookIdWorldWorldIdRaceRaceIdRouteImport.update({
    id: '/race/$raceId',
    path: '/race/$raceId',
    getParentRoute: () => BookBookIdWorldWorldIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/plot-timeline': typeof PlotTimelineRoute
  '/beast/$id': typeof BeastIdRoute
  '/plot-arc/$id': typeof PlotArcIdRoute
  '/book/$bookId/chapters': typeof BookBookIdChaptersRoute
  '/book/$bookId/dashboard': typeof BookBookIdDashboardRoute
  '/item/$id/timeline': typeof ItemIdTimelineRoute
  '/book/$bookId': typeof BookBookIdIndexRoute
  '/item/$id': typeof ItemIdIndexRoute
  '/book/$bookId/chapter/$chapterId': typeof BookBookIdChapterChapterIdRoute
  '/book/$bookId/character/$characterId': typeof BookBookIdCharacterCharacterIdRouteWithChildren
  '/book/$bookId/file/$fileId': typeof BookBookIdFileFileIdRoute
  '/book/$bookId/organization/$orgId': typeof BookBookIdOrganizationOrgIdRoute
  '/book/$bookId/world/$worldId': typeof BookBookIdWorldWorldIdRouteWithChildren
  '/book/$bookId/character/$characterId/family-tree': typeof BookBookIdCharacterCharacterIdFamilyTreeRoute
  '/book/$bookId/world/$worldId/race/$raceId': typeof BookBookIdWorldWorldIdRaceRaceIdRoute
  '/book/$bookId/world/$worldId/species/$speciesId': typeof BookBookIdWorldWorldIdSpeciesSpeciesIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/plot-timeline': typeof PlotTimelineRoute
  '/beast/$id': typeof BeastIdRoute
  '/plot-arc/$id': typeof PlotArcIdRoute
  '/book/$bookId/chapters': typeof BookBookIdChaptersRoute
  '/book/$bookId/dashboard': typeof BookBookIdDashboardRoute
  '/item/$id/timeline': typeof ItemIdTimelineRoute
  '/book/$bookId': typeof BookBookIdIndexRoute
  '/item/$id': typeof ItemIdIndexRoute
  '/book/$bookId/chapter/$chapterId': typeof BookBookIdChapterChapterIdRoute
  '/book/$bookId/character/$characterId': typeof BookBookIdCharacterCharacterIdRouteWithChildren
  '/book/$bookId/file/$fileId': typeof BookBookIdFileFileIdRoute
  '/book/$bookId/organization/$orgId': typeof BookBookIdOrganizationOrgIdRoute
  '/book/$bookId/world/$worldId': typeof BookBookIdWorldWorldIdRouteWithChildren
  '/book/$bookId/character/$characterId/family-tree': typeof BookBookIdCharacterCharacterIdFamilyTreeRoute
  '/book/$bookId/world/$worldId/race/$raceId': typeof BookBookIdWorldWorldIdRaceRaceIdRoute
  '/book/$bookId/world/$worldId/species/$speciesId': typeof BookBookIdWorldWorldIdSpeciesSpeciesIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/plot-timeline': typeof PlotTimelineRoute
  '/beast/$id': typeof BeastIdRoute
  '/plot-arc/$id': typeof PlotArcIdRoute
  '/book/$bookId/chapters': typeof BookBookIdChaptersRoute
  '/book/$bookId/dashboard': typeof BookBookIdDashboardRoute
  '/item/$id/timeline': typeof ItemIdTimelineRoute
  '/book/$bookId/': typeof BookBookIdIndexRoute
  '/item/$id/': typeof ItemIdIndexRoute
  '/book/$bookId/chapter/$chapterId': typeof BookBookIdChapterChapterIdRoute
  '/book/$bookId/character/$characterId': typeof BookBookIdCharacterCharacterIdRouteWithChildren
  '/book/$bookId/file/$fileId': typeof BookBookIdFileFileIdRoute
  '/book/$bookId/organization/$orgId': typeof BookBookIdOrganizationOrgIdRoute
  '/book/$bookId/world/$worldId': typeof BookBookIdWorldWorldIdRouteWithChildren
  '/book/$bookId/character/$characterId/family-tree': typeof BookBookIdCharacterCharacterIdFamilyTreeRoute
  '/book/$bookId/world/$worldId/race/$raceId': typeof BookBookIdWorldWorldIdRaceRaceIdRoute
  '/book/$bookId/world/$worldId/species/$speciesId': typeof BookBookIdWorldWorldIdSpeciesSpeciesIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/plot-timeline'
    | '/beast/$id'
    | '/plot-arc/$id'
    | '/book/$bookId/chapters'
    | '/book/$bookId/dashboard'
    | '/item/$id/timeline'
    | '/book/$bookId'
    | '/item/$id'
    | '/book/$bookId/chapter/$chapterId'
    | '/book/$bookId/character/$characterId'
    | '/book/$bookId/file/$fileId'
    | '/book/$bookId/organization/$orgId'
    | '/book/$bookId/world/$worldId'
    | '/book/$bookId/character/$characterId/family-tree'
    | '/book/$bookId/world/$worldId/race/$raceId'
    | '/book/$bookId/world/$worldId/species/$speciesId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/plot-timeline'
    | '/beast/$id'
    | '/plot-arc/$id'
    | '/book/$bookId/chapters'
    | '/book/$bookId/dashboard'
    | '/item/$id/timeline'
    | '/book/$bookId'
    | '/item/$id'
    | '/book/$bookId/chapter/$chapterId'
    | '/book/$bookId/character/$characterId'
    | '/book/$bookId/file/$fileId'
    | '/book/$bookId/organization/$orgId'
    | '/book/$bookId/world/$worldId'
    | '/book/$bookId/character/$characterId/family-tree'
    | '/book/$bookId/world/$worldId/race/$raceId'
    | '/book/$bookId/world/$worldId/species/$speciesId'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/plot-timeline'
    | '/beast/$id'
    | '/plot-arc/$id'
    | '/book/$bookId/chapters'
    | '/book/$bookId/dashboard'
    | '/item/$id/timeline'
    | '/book/$bookId/'
    | '/item/$id/'
    | '/book/$bookId/chapter/$chapterId'
    | '/book/$bookId/character/$characterId'
    | '/book/$bookId/file/$fileId'
    | '/book/$bookId/organization/$orgId'
    | '/book/$bookId/world/$worldId'
    | '/book/$bookId/character/$characterId/family-tree'
    | '/book/$bookId/world/$worldId/race/$raceId'
    | '/book/$bookId/world/$worldId/species/$speciesId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  PlotTimelineRoute: typeof PlotTimelineRoute
  BeastIdRoute: typeof BeastIdRoute
  PlotArcIdRoute: typeof PlotArcIdRoute
  BookBookIdChaptersRoute: typeof BookBookIdChaptersRoute
  BookBookIdDashboardRoute: typeof BookBookIdDashboardRoute
  ItemIdTimelineRoute: typeof ItemIdTimelineRoute
  BookBookIdIndexRoute: typeof BookBookIdIndexRoute
  ItemIdIndexRoute: typeof ItemIdIndexRoute
  BookBookIdChapterChapterIdRoute: typeof BookBookIdChapterChapterIdRoute
  BookBookIdCharacterCharacterIdRoute: typeof BookBookIdCharacterCharacterIdRouteWithChildren
  BookBookIdFileFileIdRoute: typeof BookBookIdFileFileIdRoute
  BookBookIdOrganizationOrgIdRoute: typeof BookBookIdOrganizationOrgIdRoute
  BookBookIdWorldWorldIdRoute: typeof BookBookIdWorldWorldIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/plot-timeline': {
      id: '/plot-timeline'
      path: '/plot-timeline'
      fullPath: '/plot-timeline'
      preLoaderRoute: typeof PlotTimelineRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plot-arc/$id': {
      id: '/plot-arc/$id'
      path: '/plot-arc/$id'
      fullPath: '/plot-arc/$id'
      preLoaderRoute: typeof PlotArcIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/beast/$id': {
      id: '/beast/$id'
      path: '/beast/$id'
      fullPath: '/beast/$id'
      preLoaderRoute: typeof BeastIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/item/$id/': {
      id: '/item/$id/'
      path: '/item/$id'
      fullPath: '/item/$id'
      preLoaderRoute: typeof ItemIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/$bookId/': {
      id: '/book/$bookId/'
      path: '/book/$bookId'
      fullPath: '/book/$bookId'
      preLoaderRoute: typeof BookBookIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/item/$id/timeline': {
      id: '/item/$id/timeline'
      path: '/item/$id/timeline'
      fullPath: '/item/$id/timeline'
      preLoaderRoute: typeof ItemIdTimelineRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/$bookId/dashboard': {
      id: '/book/$bookId/dashboard'
      path: '/book/$bookId/dashboard'
      fullPath: '/book/$bookId/dashboard'
      preLoaderRoute: typeof BookBookIdDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/$bookId/chapters': {
      id: '/book/$bookId/chapters'
      path: '/book/$bookId/chapters'
      fullPath: '/book/$bookId/chapters'
      preLoaderRoute: typeof BookBookIdChaptersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/$bookId/world/$worldId': {
      id: '/book/$bookId/world/$worldId'
      path: '/book/$bookId/world/$worldId'
      fullPath: '/book/$bookId/world/$worldId'
      preLoaderRoute: typeof BookBookIdWorldWorldIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/$bookId/organization/$orgId': {
      id: '/book/$bookId/organization/$orgId'
      path: '/book/$bookId/organization/$orgId'
      fullPath: '/book/$bookId/organization/$orgId'
      preLoaderRoute: typeof BookBookIdOrganizationOrgIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/$bookId/file/$fileId': {
      id: '/book/$bookId/file/$fileId'
      path: '/book/$bookId/file/$fileId'
      fullPath: '/book/$bookId/file/$fileId'
      preLoaderRoute: typeof BookBookIdFileFileIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/$bookId/character/$characterId': {
      id: '/book/$bookId/character/$characterId'
      path: '/book/$bookId/character/$characterId'
      fullPath: '/book/$bookId/character/$characterId'
      preLoaderRoute: typeof BookBookIdCharacterCharacterIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/$bookId/chapter/$chapterId': {
      id: '/book/$bookId/chapter/$chapterId'
      path: '/book/$bookId/chapter/$chapterId'
      fullPath: '/book/$bookId/chapter/$chapterId'
      preLoaderRoute: typeof BookBookIdChapterChapterIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/book/$bookId/character/$characterId/family-tree': {
      id: '/book/$bookId/character/$characterId/family-tree'
      path: '/family-tree'
      fullPath: '/book/$bookId/character/$characterId/family-tree'
      preLoaderRoute: typeof BookBookIdCharacterCharacterIdFamilyTreeRouteImport
      parentRoute: typeof BookBookIdCharacterCharacterIdRoute
    }
    '/book/$bookId/world/$worldId/species/$speciesId': {
      id: '/book/$bookId/world/$worldId/species/$speciesId'
      path: '/species/$speciesId'
      fullPath: '/book/$bookId/world/$worldId/species/$speciesId'
      preLoaderRoute: typeof BookBookIdWorldWorldIdSpeciesSpeciesIdRouteImport
      parentRoute: typeof BookBookIdWorldWorldIdRoute
    }
    '/book/$bookId/world/$worldId/race/$raceId': {
      id: '/book/$bookId/world/$worldId/race/$raceId'
      path: '/race/$raceId'
      fullPath: '/book/$bookId/world/$worldId/race/$raceId'
      preLoaderRoute: typeof BookBookIdWorldWorldIdRaceRaceIdRouteImport
      parentRoute: typeof BookBookIdWorldWorldIdRoute
    }
  }
}

interface BookBookIdCharacterCharacterIdRouteChildren {
  BookBookIdCharacterCharacterIdFamilyTreeRoute: typeof BookBookIdCharacterCharacterIdFamilyTreeRoute
}

const BookBookIdCharacterCharacterIdRouteChildren: BookBookIdCharacterCharacterIdRouteChildren =
  {
    BookBookIdCharacterCharacterIdFamilyTreeRoute:
      BookBookIdCharacterCharacterIdFamilyTreeRoute,
  }

const BookBookIdCharacterCharacterIdRouteWithChildren =
  BookBookIdCharacterCharacterIdRoute._addFileChildren(
    BookBookIdCharacterCharacterIdRouteChildren,
  )

interface BookBookIdWorldWorldIdRouteChildren {
  BookBookIdWorldWorldIdRaceRaceIdRoute: typeof BookBookIdWorldWorldIdRaceRaceIdRoute
  BookBookIdWorldWorldIdSpeciesSpeciesIdRoute: typeof BookBookIdWorldWorldIdSpeciesSpeciesIdRoute
}

const BookBookIdWorldWorldIdRouteChildren: BookBookIdWorldWorldIdRouteChildren =
  {
    BookBookIdWorldWorldIdRaceRaceIdRoute:
      BookBookIdWorldWorldIdRaceRaceIdRoute,
    BookBookIdWorldWorldIdSpeciesSpeciesIdRoute:
      BookBookIdWorldWorldIdSpeciesSpeciesIdRoute,
  }

const BookBookIdWorldWorldIdRouteWithChildren =
  BookBookIdWorldWorldIdRoute._addFileChildren(
    BookBookIdWorldWorldIdRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  PlotTimelineRoute: PlotTimelineRoute,
  BeastIdRoute: BeastIdRoute,
  PlotArcIdRoute: PlotArcIdRoute,
  BookBookIdChaptersRoute: BookBookIdChaptersRoute,
  BookBookIdDashboardRoute: BookBookIdDashboardRoute,
  ItemIdTimelineRoute: ItemIdTimelineRoute,
  BookBookIdIndexRoute: BookBookIdIndexRoute,
  ItemIdIndexRoute: ItemIdIndexRoute,
  BookBookIdChapterChapterIdRoute: BookBookIdChapterChapterIdRoute,
  BookBookIdCharacterCharacterIdRoute:
    BookBookIdCharacterCharacterIdRouteWithChildren,
  BookBookIdFileFileIdRoute: BookBookIdFileFileIdRoute,
  BookBookIdOrganizationOrgIdRoute: BookBookIdOrganizationOrgIdRoute,
  BookBookIdWorldWorldIdRoute: BookBookIdWorldWorldIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
